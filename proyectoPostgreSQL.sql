-- Schema
CREATE SCHEMA CINES;

SET SEARCH_PATH = CINES;

-- Dominio ENTEROPOSITIVO
CREATE DOMAIN ENTEROPOSITIVO AS INT DEFAULT 0 CHECK (VALUE >= 0);

-- Dominio para calificación
CREATE DOMAIN CALIFICACION_TIPO AS VARCHAR(20)
CHECK (VALUE IN ('Apta todo público', '+13 años', '+15 años', '+18 años'));

-- Entidades
CREATE TABLE PELICULA (
	ID_PELICULA SERIAL NOT NULL PRIMARY KEY, -- Usamos 'SERIAL' para generar automaticamente id_pelicula
	TITULO_ORIGINAL VARCHAR(255) ,
	TITULO_ESPANOL VARCHAR(255),
	TITULO_DISTRIB VARCHAR(255),
	FECHA_ESTRENO DATE,
	RESUMEN TEXT,
	DURACION TIME,
	CALIFICACION CALIFICACION_TIPO,
	IDIOMA_ORIG VARCHAR(50),
	URL VARCHAR(255),
	GENERO VARCHAR(50),
	ANIO_PRODUC ENTEROPOSITIVO
);

CREATE TABLE PERSONA (
	DNI ENTEROPOSITIVO NOT NULL PRIMARY KEY,
	NOMBRE VARCHAR(255),
	NACIONALIDAD VARCHAR(50),
	CANT_PELICULA ENTEROPOSITIVO
);

CREATE TABLE CINE (
	NOMBRE_CINE VARCHAR(45) NOT NULL PRIMARY KEY,
	TELEFONO VARCHAR(45),
	DIRECCION VARCHAR(45)
);

CREATE TABLE SALA (
	ID_SALA SERIAL NOT NULL PRIMARY KEY,
	CANT_BUTACA ENTEROPOSITIVO,
	NOMBRE_CINE VARCHAR(45),
	CONSTRAINT FKCINE FOREIGN KEY (NOMBRE_CINE) REFERENCES CINE (NOMBRE_CINE) ON DELETE CASCADE -- Cuando se elimine un cine, todas las salas de ese cine se eliminaran
);

CREATE TABLE FUNCION (
	ID_FUNCION SERIAL NOT NULL PRIMARY KEY,
	ID_PELICULA ENTEROPOSITIVO NOT NULL,
	ID_SALA ENTEROPOSITIVO NOT NULL,
	FECHA DATE,
	HORA_COMIENZO TIME,
	HORA_FINALIZACION TIME,
	CONSTRAINT FKPELICULA FOREIGN KEY (ID_PELICULA) REFERENCES PELICULA (ID_PELICULA) ON DELETE CASCADE,
	CONSTRAINT FKSALA FOREIGN KEY (ID_SALA) REFERENCES SALA (ID_SALA) ON DELETE CASCADE,
	CONSTRAINT CONTROL_HORA CHECK (HORA_COMIENZO < HORA_FINALIZACION) -- Restricción
);

--Tabla para llevar los cambios de fecha de estreno de las peliculas
CREATE TABLE AUDITORIA (
	ID_PELICULA ENTEROPOSITIVO NOT NULL PRIMARY KEY,
	FECHA_ESTRENO_ANTERIOR DATE,
	NUEVA_FECHA_ESTRENO DATE,
	FECHA_DEL_CAMBIO DATE,
	USUARIO VARCHAR(50),
	FOREIGN KEY (ID_PELICULA) REFERENCES PELICULA (ID_PELICULA) ON DELETE CASCADE
);

-- Atributo multivaluado
CREATE TABLE PAISES_PELICULA (
	ID_PELICULA ENTEROPOSITIVO NOT NULL,
	NOMBRE_PAIS VARCHAR(45) NOT NULL,
	PRIMARY KEY (ID_PELICULA, NOMBRE_PAIS),
	FOREIGN KEY (ID_PELICULA) REFERENCES PELICULA (ID_PELICULA) ON DELETE CASCADE
);

-- Relaciones
CREATE TABLE DIRIGE (
	ID_PELICULA ENTEROPOSITIVO NOT NULL,
	DNI ENTEROPOSITIVO NOT NULL,
	PRIMARY KEY (ID_PELICULA, DNI),
	FOREIGN KEY (ID_PELICULA) REFERENCES PELICULA (ID_PELICULA) ON DELETE CASCADE,
	FOREIGN KEY (DNI) REFERENCES PERSONA (DNI)
);

CREATE TABLE PROTAGONIZO (
	ID_PELICULA ENTEROPOSITIVO NOT NULL,
	DNI ENTEROPOSITIVO NOT NULL,
	PRIMARY KEY (ID_PELICULA, DNI),
	FOREIGN KEY (ID_PELICULA) REFERENCES PELICULA (ID_PELICULA) ON DELETE CASCADE,
	FOREIGN KEY (DNI) REFERENCES PERSONA (DNI)
);

CREATE TABLE REPARTO (
	ID_PELICULA ENTEROPOSITIVO NOT NULL,
	DNI ENTEROPOSITIVO NOT NULL,
	PRIMARY KEY (ID_PELICULA, DNI),
	FOREIGN KEY (ID_PELICULA) REFERENCES PELICULA (ID_PELICULA) ON DELETE CASCADE,
	FOREIGN KEY (DNI) REFERENCES PERSONA (DNI)
);


--Fucion que carga en AUDITORIA los datos
CREATE FUNCTION AUDITORIA_FECHA() RETURNS TRIGGER AS $$
BEGIN
    IF OLD.FECHA_ESTRENO IS DISTINCT FROM NEW.FECHA_ESTRENO THEN
        INSERT INTO AUDITORIA (ID_PELICULA, FECHA_ESTRENO_ANTERIOR, NUEVA_FECHA_ESTRENO, FECHA_DEL_CAMBIO, USUARIO)
        VALUES (OLD.ID_PELICULA, OLD.FECHA_ESTRENO, NEW.FECHA_ESTRENO, CURRENT_DATE, CURRENT_USER);
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;


-- Trigger para cargar en AUDITORIA cuando en una PELICULA se cambia la FECHA_ESTRENO
CREATE TRIGGER TRIGGER_AUDITORIA
AFTER
UPDATE ON PELICULA FOR EACH ROW
EXECUTE FUNCTION AUDITORIA_FECHA();

-- Función para actualizar CANT_PELICULA
CREATE FUNCTION ACTUALIZAR_CANT_PELICULA_INCREMENTO() RETURNS TRIGGER AS $$
BEGIN 
    UPDATE PERSONA
    SET CANT_PELICULA = CANT_PELICULA + 1
    WHERE DNI = NEW.DNI;
    RETURN NEW; 
END;
$$ LANGUAGE PLPGSQL;

--Funcion para decrementar CANT_PELICULA
CREATE FUNCTION ACTUALIZAR_CANT_PELICULA_DECREMENTO() RETURNS TRIGGER AS $$
BEGIN 
    UPDATE PERSONA
    SET CANT_PELICULA = CANT_PELICULA - 1
    WHERE DNI = OLD.DNI;
    RETURN OLD; 
END;
$$ LANGUAGE PLPGSQL;

-- Triggers para incremento
CREATE TRIGGER TRIGGER_ACTUALIZAR_CANT_PELICULA_DIRIGE_INC
AFTER INSERT ON DIRIGE
FOR EACH ROW 
EXECUTE FUNCTION ACTUALIZAR_CANT_PELICULA_INCREMENTO();

CREATE TRIGGER TRIGGER_ACTUALIZAR_CANT_PELICULA_PROTAGONIZO_INC
AFTER INSERT ON PROTAGONIZO
FOR EACH ROW 
EXECUTE FUNCTION ACTUALIZAR_CANT_PELICULA_INCREMENTO();

CREATE TRIGGER TRIGGER_ACTUALIZAR_CANT_PELICULA_REPARTO_INC
AFTER INSERT ON REPARTO
FOR EACH ROW 
EXECUTE FUNCTION ACTUALIZAR_CANT_PELICULA_INCREMENTO();

-- Triggers para decremento
CREATE TRIGGER TRIGGER_ACTUALIZAR_CANT_PELICULA_DIRIGE_DEC
AFTER DELETE ON DIRIGE
FOR EACH ROW 
EXECUTE FUNCTION ACTUALIZAR_CANT_PELICULA_DECREMENTO();

CREATE TRIGGER TRIGGER_ACTUALIZAR_CANT_PELICULA_PROTAGONIZO_DEC
AFTER DELETE ON PROTAGONIZO
FOR EACH ROW 
EXECUTE FUNCTION ACTUALIZAR_CANT_PELICULA_DECREMENTO();

CREATE TRIGGER TRIGGER_ACTUALIZAR_CANT_PELICULA_REPARTO_DEC
AFTER DELETE ON REPARTO
FOR EACH ROW 
EXECUTE FUNCTION ACTUALIZAR_CANT_PELICULA_DECREMENTO();

--Funcion para convertir en mayuscula el TITULO_ORIGINAL
CREATE OR REPLACE FUNCTION MAYUSCULA()
RETURNS TRIGGER AS $$
BEGIN
    NEW.TITULO_ORIGINAL := UPPER(NEW.TITULO_ORIGINAL);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para poner en mayuscula el TITULO_ORIGINAL cuando se ingrese a PELICULA
CREATE TRIGGER TRIGGER_MAYUSCULA_TITULO_ORIGINAL
BEFORE INSERT ON PELICULA
FOR EACH ROW
EXECUTE FUNCTION MAYUSCULA();
