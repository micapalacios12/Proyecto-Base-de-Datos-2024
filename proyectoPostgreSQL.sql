-- Schema
CREATE SCHEMA CINES;

SET SEARCH_PATH = CINES;

-- Dominio ENTEROPOSITIVO
CREATE DOMAIN ENTEROPOSITIVO AS INT DEFAULT 0 CHECK (VALUE > 0);

-- Dominio para calificación
CREATE DOMAIN CALIFICACION_TIPO AS VARCHAR(20)
CHECK (VALUE IN ('Apta todo público', '+13 años', '+15 años', '+18 años'));

-- Tablas
CREATE TABLE PELICULA (
	ID_PELICULA SERIAL NOT NULL PRIMARY KEY, -- Usamos 'SERIAL' para generar automaticamente id_pelicula
	TITULO_ORIGINAL VARCHAR(255) ,
	TITULO_ESPANOL VARCHAR(255),
	TITULO_DISTRIB VARCHAR(255),
	FECHA_ESTRENO DATE,
	RESUMEN TEXT,
	DURACION ENTEROPOSITIVO,
	CALIFICACION CALIFICACION_TIPO,
	IDIOMA_ORIG VARCHAR(50),
	URL VARCHAR(255),
	GENERO VARCHAR(50),
	ANIO_PRODUC ENTEROPOSITIVO
);

CREATE TABLE PERSONA (
	DNI ENTEROPOSITIVO NOT NULL PRIMARY KEY,
	NOMBRE VARCHAR(255),
	NACIONALIDAD VARCHAR(50),
	CANT_PELICULA ENTEROPOSITIVO
);

CREATE TABLE CINE (
	NOMBRE_CINE VARCHAR(45) NOT NULL PRIMARY KEY,
	TELEFONO ENTEROPOSITIVO,
	DIRECCION VARCHAR(45)
);

CREATE TABLE SALA (
	ID_SALA SERIAL NOT NULL PRIMARY KEY,
	CANT_BUTACA ENTEROPOSITIVO,
	NOMBRE_CINE VARCHAR(45),
	CONSTRAINT FKCINE FOREIGN KEY (NOMBRE_CINE) REFERENCES CINE (NOMBRE_CINE) ON DELETE CASCADE -- Cuando se elimine un cine, todas las salas de ese cine se eliminaran
);

CREATE TABLE FUNCION (
	ID_FUNCION SERIAL NOT NULL PRIMARY KEY,
	ID_PELICULA ENTEROPOSITIVO NOT NULL,
	ID_SALA ENTEROPOSITIVO NOT NULL,
	FECHA DATE,
	HORA_COMIENZO TIME,
	HORA_FINALIZACION TIME,
	CONSTRAINT FKPELICULA FOREIGN KEY (ID_PELICULA) REFERENCES PELICULA (ID_PELICULA) ON DELETE CASCADE,
	CONSTRAINT FKSALA FOREIGN KEY (ID_SALA) REFERENCES SALA (ID_SALA) ON DELETE CASCADE,
	CONSTRAINT CONTROL_HORA CHECK (HORA_COMIENZO < HORA_FINALIZACION) -- Restricción
);

CREATE TABLE AUDITORIA (
	ID_PELICULA ENTEROPOSITIVO NOT NULL PRIMARY KEY,
	FECHA_ESTRENO_ANTERIOR DATE,
	NUEVA_FECHA_ESTRENO DATE,
	FECHA_DEL_CAMBIO DATE,
	USUARIO VARCHAR(50),
	FOREIGN KEY (ID_PELICULA) REFERENCES PELICULA (ID_PELICULA) ON DELETE CASCADE
);

-- Atributo multivaluado
CREATE TABLE PAISES_PELICULA (
	ID_PELICULA ENTEROPOSITIVO NOT NULL,
	NOMBRE_PAIS VARCHAR(45) NOT NULL,
	PRIMARY KEY (ID_PELICULA, NOMBRE_PAIS),
	FOREIGN KEY (ID_PELICULA) REFERENCES PELICULA (ID_PELICULA) ON DELETE CASCADE
);

-- Relaciones
CREATE TABLE DIRIGE (
	ID_PELICULA ENTEROPOSITIVO NOT NULL,
	DNI ENTEROPOSITIVO NOT NULL,
	PRIMARY KEY (ID_PELICULA, DNI),
	FOREIGN KEY (ID_PELICULA) REFERENCES PELICULA (ID_PELICULA) ON DELETE CASCADE,
	FOREIGN KEY (DNI) REFERENCES PERSONA (DNI)
);

CREATE TABLE PROTAGONIZO (
	ID_PELICULA ENTEROPOSITIVO NOT NULL,
	DNI ENTEROPOSITIVO NOT NULL,
	PRIMARY KEY (ID_PELICULA, DNI),
	FOREIGN KEY (ID_PELICULA) REFERENCES PELICULA (ID_PELICULA) ON DELETE CASCADE,
	FOREIGN KEY (DNI) REFERENCES PERSONA (DNI)
);

CREATE TABLE REPARTO (
	ID_PELICULA ENTEROPOSITIVO NOT NULL,
	DNI ENTEROPOSITIVO NOT NULL,
	PRIMARY KEY (ID_PELICULA, DNI),
	FOREIGN KEY (ID_PELICULA) REFERENCES PELICULA (ID_PELICULA) ON DELETE CASCADE,
	FOREIGN KEY (DNI) REFERENCES PERSONA (DNI)
);


--Fucion que usa el trigger TRIGGER_AUDITORIA
CREATE FUNCTION AUDITORIA_FECHA () RETURNS TRIGGER AS '
	BEGIN
		IF FECHA_ESTRENO_ANTERIOR IS DISTINCT FROM NUEVA_FECHA_ESTRENO THEN
			INSERT INTO AUDITORIA (ID_PELICULA, FECHA_ESTRENO_ANTERIOR, NUEVA_FECHA_ESTRENO, FECHA_DEL_CAMBIO, USUARIO)
			VALUES (OLD.ID_PELICULA, OLD.FECHA_ESTRENO_ANTERIOR, NEW.NUEVA_FEHA_ESTRENO, CURRENT_DATE, CURRENT_USER);
    END IF;
    RETURN NEW;
END;' LANGUAGE PLPGSQL;


-- Trigger TRIGER_AUDITORIA
CREATE TRIGGER TRIGGER_AUDITORIA
AFTER
UPDATE ON PELICULA FOR EACH ROW
EXECUTE FUNCTION AUDITORIA_FECHA();

-- Función que utilizan los triggers TRIGGER_ACTUALIZAR_CANT_PELICULA_DIRIGE, TRIGGER_ACTUALIZAR_CANT_PELICULA_PROTAGONIZO, TRIGGER_ACTUALIZAR_CANT_PELICULA_REPARTO
CREATE FUNCTION ACTUALIZAR_CANT_PELICULA()
RETURNS TRIGGER AS '
BEGIN 
	--incrementa CANT_PELICULA en la tabla PERSONA
	UPDATE PERSONA
	SET CANT_PELICULA = CANT_PELICULA + 1
	WHERE DNI = NEW.DNI;
	RETURN NEW; 
END;' LANGUAGE PLPGSQL;

-- Triggers
CREATE TRIGGER TRIGGER_ACTUALIZAR_CANT_PELICULA_DIRIGE
AFTER INSERT ON DIRIGE
FOR EACH ROW 
EXECUTE FUNCTION ACTUALIZAR_CANT_PELICULA();

CREATE TRIGGER TRIGGER_ACTUALIZAR_CANT_PELICULA_PROTAGONIZO
AFTER INSERT ON PROTAGONIZO
FOR EACH ROW 
EXECUTE FUNCTION ACTUALIZAR_CANT_PELICULA();

CREATE TRIGGER TRIGGER_ACTUALIZAR_CANT_PELICULA_REPARTO
AFTER INSERT ON REPARTO
FOR EACH ROW 
EXECUTE FUNCTION ACTUALIZAR_CANT_PELICULA();
